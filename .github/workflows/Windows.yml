name: CI-Windows

on: [push]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install GitHub CLI
      run: |
        Invoke-WebRequest -Uri "https://github.com/cli/cli/releases/download/v2.42.1/gh_2.42.1_windows_amd64.msi" -OutFile ghcli.msi
        Start-Process msiexec.exe -Wait -ArgumentList '/i', 'ghcli.msi', '/quiet'

    - name: Autenticazione con GitHub CLI via GH_PAT
      shell: pwsh
      run: |
        if (Test-Path Env:\GITHUB_TOKEN) {
          Remove-Item Env:\GITHUB_TOKEN
        }
        echo $env:GH_PAT | gh auth login --with-token
      env:
        GH_PAT: ${{ secrets.GH_PAT }}

    - name: Try to download current run's artifact
      id: current_run_artifact
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: desktop-minecraft
        path: C:\Temp\MinecraftArtifact

    - name: Check if artifact was downloaded
      id: check_artifact
      run: |
        if (Test-Path "C:\Temp\MinecraftArtifact") {
          echo "found=true" >> $env:GITHUB_ENV
        } else {
          echo "found=false" >> $env:GITHUB_ENV
        }
      shell: powershell
    
    - name: Scarica artifact Minecraft da run completati con successo
      shell: pwsh
      run: |
        $runsRaw = gh run list --limit 20 --json databaseId,status,conclusion -q '.[] | select(.conclusion=="success") | .databaseId'
        $runs = $runsRaw -split "`n"  # Divide in righe

        foreach ($id in $runs) {
        $id = $id.Trim()
          if (-not [string]::IsNullOrWhiteSpace($id)) {
            gh run download $id -n desktop-minecraft -D "C:\Temp\MinecraftArtifact" 2>$null
            if (Test-Path "C:\Temp\MinecraftArtifact") {
              Write-Host "âœ… Artifact trovato nel run ID $id"
              break
            }
          }
        }

    - name: Move to Desktop if artifact exists
      run: |
        $source = "C:\Temp\MinecraftArtifact"
        $destination = "C:\Users\runneradmin\Desktop\Minecraft"
        if (Test-Path $source) {
          if (Test-Path $destination) {
            Remove-Item -Recurse -Force $destination
          }
          Move-Item -Path $source -Destination $destination
        }
      shell: powershell


    - name: Download
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
    - name: Extract
      run: |
        Expand-Archive ngrok.zip
        Write-Host "Current Folder $PWD"
    - name: Auth
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        
    - name: Enable TS
      run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server'-name "fDenyTSConnections" -Value 0
    - run: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
    - run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
    - run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "$Env:WIN_PASS" -Force)
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        WIN_PASS: ${{ secrets.WIN_PASS }}
        
    - name: Variabili d'ambiente! Importante
      run: echo ("APPDATA_DIR=" + $env:APPDATA) >> $env:GITHUB_ENV
      #working-directory: ${{ github.workspace }}

    - name: Set up JDK 21 (Temurin)
      uses: actions/setup-java@v4
      continue-on-error: true
      with:
        distribution: 'temurin'  # Distribuzione del JDK
        java-version: '21'       # Versione precisa

  #  - name: Install Notepad++
  #    continue-on-error: true
  #    run: choco install notepadplusplus -y
  #    shell: powershell

    - name: See extensions file
      continue-on-error: true
      shell: powershell
      run: |
        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'HideFileExt' -Value 0
        Stop-Process -Name explorer -Force
        

    - name: Start ngrok tunnel in background
      shell: powershell
      run: |
        $ngrokPath = "$PWD\ngrok\ngrok.exe"
        $ngrokArgs = "tcp 3389"
        Write-Host "Starting ngrok..."
        $ngrokProcess = Start-Process -FilePath $ngrokPath -ArgumentList $ngrokArgs -WindowStyle Hidden -PassThru
        Write-Host "ngrok started with PID $($ngrokProcess.Id)"


    - name: Install jq for Windows
      run: |
        Invoke-WebRequest -Uri https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win64.exe -OutFile jq.exe

    - name: Stampa l'URL ngrok nella console (Windows)
      shell: powershell
      run: |
        Start-Sleep -Seconds 5
        $response = Invoke-WebRequest -Uri http://127.0.0.1:4040/api/tunnels
        $json = $response.Content | Out-String
        $url = echo $json | .\jq.exe -r '.tunnels[0].public_url'
        Write-Host "Indirizzo ngrok per RDP (copialo nel tuo client):"
        Write-Host $url
        Write-Host ""
        Write-Host "Accesso:"
        Write-Host "Username: runneradmin"
        Write-Host "Password: (vedi secret WIN_PASS)"

    - name: Wait for stopVPS.inf file or remote Gist to continue
      shell: powershell
      run: |
          $localPath = "C:\Users\runneradmin\Desktop\stopVPS.inf"
          # Another Idea to Shutdown VPS with public or private Repository
          $remoteUrl = "https://pastebin.com/raw/qUKECE5Y"
          
          Write-Host "Waiting for stopVPS.inf to appear on Desktop of click stopVPS.bat "
          Write-Host "Waiting for remote Pastebin for shutdown trigger..."
          
          while ($true) {
            $shouldStop = $false

            # 1. Check local file
            if (Test-Path $localPath) {
              Write-Host "Found local file stopVPS.inf"
              $shouldStop = $true
            }
            
            # 2. Controlla il contenuto da Pastebin
            try {
              #$response = Invoke-WebRequest -Uri $remoteUrl -UseBasicParsing
              $response = Invoke-WebRequest -Uri $remoteUrl -UseBasicParsing -Headers @{ "Cache-Control" = "no-cache" }

              $content = $response.Content.Trim().ToLower()
              
              # Write-Host "Pastebin content: $content"
              Write-Host "Raw Pastebin content: '$($response.Content)'"
  
              if ($content -like "*stop*") {
                Write-Host "Pastebin dice STOP"
                $shouldStop = $true
              }

              #if ($content -eq "stop") {
              #  Write-Host "Pastebin dice STOP"
              #  $shouldStop = $true
              #}
            } catch {
              Write-Host "Errore nel recupero da Pastebin: $_"
            }
            
            if ($shouldStop) {
              break
            }

            Start-Sleep -Seconds 40
          }
          
          Write-Host "Shutdown condition met. Proceeding..."
      env:
        REPOSITORY_TOKEN: ${{ secrets.REPOSITORY_TOKEN }}

    - name: Kill ngrok tunnel
      run: |
          Get-Process ngrok -ErrorAction SilentlyContinue | Stop-Process -Force

    - name: Upload Minecraft folder from Desktop
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: desktop-minecraft
        path: C:\Users\runneradmin\Desktop\Minecraft
