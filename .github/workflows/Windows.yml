name: Minecraft Remote Desktop with Google Drive Sync
on: [push]

jobs:
  remote-desktop:
    runs-on: windows-latest

    steps:
    # 1. Setup base
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Install rclone per Google Drive sync
    - name: Install and configure rclone
      shell: powershell
      run: |
        # Install
        Invoke-WebRequest -Uri "https://downloads.rclone.org/rclone-current-windows-amd64.zip" -OutFile rclone.zip
        Expand-Archive rclone.zip -DestinationPath rclone-temp
        Move-Item -Path "rclone-temp\rclone-*-windows-amd64\rclone.exe" -Destination "C:\Windows\System32\"
        
        # Config
        $config = @"
        [gdrive]
        type = drive
        client_id = $env:RCLONE_CLIENT_ID
        client_secret = $env:RCLONE_CLIENT_SECRET
        token = $env:RCLONE_TOKEN
        "@
        $config | Out-File "$env:APPDATA\rclone\rclone.conf"
      env:
        RCLONE_CLIENT_ID: ${{ secrets.RCLONE_CLIENT_ID }}
        RCLONE_CLIENT_SECRET: ${{ secrets.RCLONE_CLIENT_SECRET }}
        RCLONE_TOKEN: ${{ secrets.RCLONE_TOKEN }}

    # 3. Download Minecraft da Google Drive
    - name: Sync from Google Drive
      shell: powershell
      run: |
        $localPath = "C:\Users\runneradmin\Desktop\Minecraft"
        rclone sync gdrive:MinecraftBackup $localPath --create-empty-src-dirs --progress
        Get-ChildItem $localPath | Format-Table Name, Length, LastWriteTime

    # 4. Setup Remote Desktop
    - name: Configure RDP access
      shell: powershell
      run: |
        # Enable RDP
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        
        # Set password
        $user = "runneradmin"
        $password = ConvertTo-SecureString $env:WIN_PASS -AsPlainText -Force
        Set-LocalUser -Name $user -Password $password
      env:
        WIN_PASS: ${{ secrets.WIN_PASS }}

    # 5. Ngrok tunnel
    - name: Setup ngrok
      shell: powershell
      run: |
        # Download and extract
        Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
        Expand-Archive ngrok.zip
        
        # Auth and start
        .\ngrok\ngrok.exe authtoken $env:NGROK_AUTH_TOKEN
        Start-Process -FilePath ".\ngrok\ngrok.exe" -ArgumentList "tcp 3389" -WindowStyle Hidden
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    # 6. Show connection info
    - name: Get RDP connection details
      shell: powershell
      run: |
        Start-Sleep -Seconds 10
        $tunnels = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels"
        $rdpUrl = $tunnels.tunnels[0].public_url -replace "tcp://", ""
        Write-Host "=== RDP CONNECTION INFO ==="
        Write-Host "Address: $($rdpUrl.Split(':')[0])"
        Write-Host "Port: $($rdpUrl.Split(':')[1])"
        Write-Host "Username: runneradmin"
        Write-Host "Password: ${{ secrets.WIN_PASS }}"

    # 7. Wait for shutdown signal
    - name: Wait for termination
      shell: powershell
      run: |
        $maxDuration = 6 * 60 * 60  # 6 ore in secondi
        $interval = 30
        $elapsed = 0
        
        while ($elapsed -lt $maxDuration) {
            # Controllo file locale
            if (Test-Path "C:\Users\runneradmin\Desktop\stopVPS.inf") {
                Write-Host "Found shutdown file"
                break
            }
            
            # Controllo remoto (esempio con Pastebin)
            try {
                $content = (Invoke-WebRequest -Uri "https://pastebin.com/raw/qUKECE5Y" -UseBasicParsing).Content
                if ($content -match "stop") { break }
            } catch { Write-Host "Pastebin check failed: $_" }
            
            Start-Sleep -Seconds $interval
            $elapsed += $interval
            Write-Host "Elapsed: $elapsed/$maxDuration seconds"
        }

    # 8. Cleanup and sync back to Google Drive
    - name: Final sync to Google Drive
      if: always()
      shell: powershell
      run: |
        # Stop ngrok
        Get-Process ngrok -ErrorAction SilentlyContinue | Stop-Process -Force
        
        # Sync Minecraft folder
        $localPath = "C:\Users\runneradmin\Desktop\Minecraft"
        if (Test-Path $localPath) {
            rclone sync $localPath gdrive:MinecraftBackup --progress --create-empty-src-dirs
        }
